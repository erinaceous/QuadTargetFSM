[camera]
; file can either be a webcam index (int), or a string that is one of:
; * /path/to/video/file.mp4 (supports any video format that ffmpeg/libav do)
; * /path/to/image/sequence/%04d.png (doesn't work that well)
; * /path/to/single_image.jpg
; * /folder/of/images/ (looks for any images of any format without specific order)
; * a.domain.name:5011 -- host:port. see SocketCamera.cpp for how to make use of this.
; camera index is usually 0 unless you have multiple webcams.

; file = /tmp/sd/flight_1435671703.48.mp4
; file = /tmp/sd/flight_1435933737.8.mp4
; file = /home/owain/Dropbox/Aber/MSc_Dissertation/data/synthetic_targets-3.mp4
; file = /everything/quad_data/markers/rescaled_64/%04d.png
; file = test7.png
; file = Target2.png
; file = /home/owain/flight_1.mp4
; file = /everything/quad_data/data/15jun15-afternoon_flight.mp4
file = /everything/quad_data/data/flight_1435933737.8.h264
; file = /everything/quad_data/data/flight_1436545331.56.h264
; file = /everything/quad_data/data/flight_1435858713.74.h264
; file = /everything/quad_data/snapshots/
; file = /home/owain/Dropbox/Aber/MSc_Dissertation/data/synthetic_targets-3.mp4
; file = 0
; file = /tmp/frontsensor.rgb
; file = localhost:5011

; width and height are ignored for video files. this is for webcam and socket
; inputs.
width = 1080
height = 720

; set FPS to <= 0 to capture as fast as camera will allow.
; this doesn't really work, but at least can control the framerate
; of the recorded video if save_video in [gui] is set.
fps = 1

; sets CV_CAP_PROP_CONVERT_RGB to this value.
; most V4l2 webcam drivers I've tried don't support this,
; so they ignore it and give you an RGB (well, BGR in OpenCV)
; image anyway. maybe in future builds this will work.
convert_rgb = true

; if the webcam image is RGB, converts to YUV.
convert_yuv = true

; the camera on my pi is mounted upside down, so flipping image is needed.
flip_vertical = false
flip_horizontal = false

; (float) focal length of the camera being used, in mm.
focal_length = 3.6

; (float) magnification factor - used when attaching lenses.
; my wide angle lens magnifies focal length by 0.4.
magnification_factor = 0.4

; (float) sensor width of camera, in mm.
sensor_width = 3.67

; (float) offset the angle of detected targets by this much.
; (they are being detected at 90 degrees less than they should be
; so far). value is in radians.
angle_offset = 1.57079632679

[gui]
; if headless, no GUI is shown at all. this reduces CPU usage.
headless = false
; how long to wait for key input (to advance frame by frame).
; <= 0 is forever, >=1 is time in milliseconds.
waitKey = 1
; if debug is true, it'll spit more info out on command line.
debug = true
; if save_video is not none, it'll save debug output to this file.
save_video = /tmp/quadtargetfsm_video.avi
; save_video = none

; similar to waitKey, but for headless stuff -- other processes that are
; reading the output of QuadTarget.
; (bool) whether to wait for input on stdin before processing a frame.
wait_for_input = false

; (int) if these are higher than 0, resize the output image to these
; dimensions. used for the outputted video also.
scale_w = 0
scale_h = 0

[output]
marker_info = false
demands = true

[render]
; (bools) items to render to output window/video.
input = true
fps = true
navigator = true
target = true
markers = true
fsm_state = true

[target]
; (floats) real physical dimensions of the target used, in mm.
width = 594
height = 420
; width = 297
; height = 210


[navigator]
; (float) "dead zones" for control. if the marker is off-center
; by less than these amounts on their respective axes, don't
; request the quadcopter move position.
; rotation is in DEGREES.
rotation_deadzone = 30.0
; these two are scalar values from 0.0 to 0.1 -- the real dead
; zones are calculated from the webcam image dimensions.
; e.g. deadzone_x = (center.x) +- (image.rows * horizontal_deadzone)
horizontal_deadzone = 0.05
vertical_deadzone = 0.05

; these are the PID values for all the controller axes.
pitch_p = 1.0
pitch_i = 0.0
pitch_d = 0.0
roll_p = 1.0
roll_i = 0.0
roll_d = 0.0
yaw_p = 0.1
yaw_i = 0.0
yaw_d = 0.0
throttle_p = 0.0
throttle_i = 0.0
throttle_d = 0.0

[parameters]
; (double) 1 - variance threshold
variance = 0.30

; (int) skip every N rows of the image
row_step = 4

; (int) minimum number of pixels needed in state 1 of the state machine.
min_length = 1

; (double) amount of variation in pixel counts that each state can have
; compared to state 1. (actual value is 1 - this, so higher tolerance is a
; lower value here)
tolerance = 0.25

; (int) number of threshold levels used.
num_bins = 4

; (double) amount that the marker aspect ratio can vary
; (with 0.0 being completely square)
marker_aspect_tolerance = 0.5

; (double) minimum distance between markers in a target
min_marker_distance = 0.5

; (double) maximum distance between markers in a target
max_marker_distance = 4.0

; (double) amount that the marker size can vary in a
; target.
; (actual tolerance = 1.0 - this)
; decreasing this means potentially markers
; with a more skewed perspective will be
; detected.
marker_size_tolerance = 0.25

; (float) amount of seconds a target can go undetected before
; it's removed from the list.
target_lifetime = 0.75

; (float) smoothness factor applied when updating
; existing targets with newly detected ones.
target_alpha = 0.25

; (double) smoothing applied to pixel value averaging
; 1 / how many frames you want to average over
alpha = 0.33

; (int) minimum age of a target (in frames) before we start to consider it
; as valid
min_age = 3
