[camera]
; file can either be a webcam index (int), or a string that is one of:
; * /path/to/video/file.mp4 (supports any video format that ffmpeg/libav do)
; * /path/to/image/sequence/%04d.png (doesn't work that well)
; * /path/to/single_image.jpg
; * /folder/of/images/ (looks for any images of any format without specific order)
; * a.domain.name:5011 -- host:port. see SocketCamera.cpp for how to make use of this.
; camera index is usually 0 unless you have multiple webcams.

; file = /tmp/sd/flight_1435671703.48.mp4
; file = /tmp/sd/flight_1435933737.8.mp4
; file = /home/owain/Dropbox/Aber/MSc_Dissertation/data/synthetic_targets-3.mp4
; file = /everything/quad_data/markers/rescaled_64/%04d.png
; file = test7.png
; file = Target2.png
; file = /home/owain/flight_1.mp4
; file = /everything/quad_data/data/15jun15-afternoon_flight.mp4
; file = /everything/quad_data/data/flight_1435933737.8.h264
; file = /everything/quad_data/data/flight_1436545331.56.h264
; file = /everything/quad_data/data/flight_1435858713.74.h264
; file = /everything/quad_data/snapshots/
; file = /home/owain/Dropbox/Aber/MSc_Dissertation/data/synthetic_targets-3.mp4
; file = 0
; file = /tmp/frontsensor.rgb
; file = localhost:5011

file = 0

; width and height are ignored for video files. this is for webcam and socket
; inputs.
width = 1024
height = 768

; set FPS to <= 0 to capture as fast as camera will allow.
; this doesn't really work, but at least can control the framerate
; of the recorded video if save_video in [gui] is set.
fps = 0

; sets CV_CAP_PROP_CONVERT_RGB to this value.
; most V4l2 webcam drivers I've tried don't support this,
; so they ignore it and give you an RGB (well, BGR in OpenCV)
; image anyway. maybe in future builds this will work.
convert_rgb = true

; if the webcam image is RGB, converts to YUV.
convert_yuv = true

; the camera on my pi is mounted upside down, so flipping image is needed.
flip_vertical = false
flip_horizontal = false

; (float) focal length of the camera being used, in mm.
focal_length = 3.6

; (float) magnification factor - used when attaching lenses.
; my wide angle lens magnifies focal length by 0.4.
; magnification_factor = 0.4
magnification_factor = 1.0

; (float) sensor width of camera, in mm.
sensor_width = 3.67

; (float) offset the angle of detected targets by this much.
; (they are being detected at 90 degrees less than they should be
; so far). value is in radians.
angle_offset = 1.57079632679

[gui]
; if headless, no GUI is shown at all. this reduces CPU usage.
headless = false
; how long to wait for key input (to advance frame by frame).
; <= 0 is forever, >=1 is time in milliseconds.
waitKey = 1
; if debug is true, it'll spit more info out on command line.
debug = true
; if save_video is not none, it'll save debug output to this file.
; save_video = /tmp/quadtargetfsm_video.avi
save_video = none

; if save_snapshots is not none, it'll save snapshots of the video output as
; an image sequence whenever a *new* target is found.
; examples:
;   /path/to/single_image.png
;   /path/to/image_sequence_%04lu.jpg
; (the counter is stored internally as an unsigned long)
; save_snapshots = /tmp/quadtarget/%04lu.jpg
save_snapshots = none

; similar to waitKey, but for headless stuff -- other processes that are
; reading the output of QuadTarget.
; (bool) whether to wait for input on stdin before processing a frame.
wait_for_input = false

; (int) if these are higher than 0, resize the output image to these
; dimensions. used for the outputted video also.
scale_w = 0
scale_h = 0

[output]
marker_info = false
target = false
navigator = false
times = true

[render]
; (bools) items to render to output window/video.
input = true
fps = true
navigator = true
target = true
markers = true
fsm_state = true

[navigator]
; (float) "dead zones" for control. if the marker is off-center
; by less than these amounts on their respective axes, don't
; request the quadcopter move position.
; rotation is in DEGREES.
rotation_deadzone = 30.0
; these two are scalar values from 0.0 to 0.1 -- the real dead
; zones are calculated from the webcam image dimensions.
; e.g. deadzone_x = (center.x) +- (image.rows * horizontal_deadzone)
horizontal_deadzone = 0.05
vertical_deadzone = 0.05

; these are the PID values for all the controller axes.
pitch_p = 1.0
pitch_i = 0.0
pitch_d = 0.0
roll_p = 1.0
roll_i = 0.0
roll_d = 0.0
yaw_p = 0.1
yaw_i = 0.0
yaw_d = 0.0
throttle_p = 0.0
throttle_i = 0.0
throttle_d = 0.0

[parameters]
; (string) marker finding method to use. 'fsm' or 'cascade'.
method = fsm

[parameters.fsm]
; (int) minimum intensity change threshold for edge detection.
; if the global mean pixel variance in the image is less than this, it is
; clamped to this value. this means that when images are very "flat" (e.g.
; bright white background), image noise isn't amplified, which could create
; more falsely detected markers if it was.
min_threshold = 20

; (double) smoothing factor applied to threshold averaging.
; the mean pixel intensity variance is calculated as a rolling exponential
; mean. the "alpha" value defining how significant new values are compared
; to past values is calculated as:
; 1.0 / ((image width) / threshold_smoothness)
; so at 1.0 this would average a single row of pixels.
; at 0.01 this would remember up to 100 rows of pixels.
; which rows are used depends on the row_step variable below.
threshold_smoothness = 0.1

; (int) skip every N rows of the image
row_step = 4

; (int) minimum number of pixels needed in state 1 of the state machine.
; another means of filtering out noise, but does increase the minimum
; size at which real markers will be detected.
min_length = 2

; (double) amount of variation in pixel counts that each state can have
; compared to state 1. (actual value is 1 - this, so higher tolerance is a
; lower value here)
; making this value lower means potentially markers that are at more skewed
; angles, or are overbright (or too dark) will be detected, but it does also
; increase the probability of noise.
tolerance = 0.66

; (double) amount that the marker aspect ratio can vary
; (with 0.0 being completely square)
; again, increasing this value
marker_aspect_tolerance = 0.25

[parameters.cascade]
; (string) path to classifier XML
classifier_file = /home/owain/Dropbox/Aber/MSc_Dissertation/code/QuadTargetFSM/cascades/64/cascade.xml
; classifier_file = /everything/quad_data/cascade/classifier/16/HOG/cascade.xml

; (int) minimum size of marker (both width and height are equal)
min_size = 1

; (int) minimum number of neighbours a feature needs to be valid
min_neighbors = 1

; (double) scale factor
scale_factor = 2.0

[target]
; (doubles) real physical dimensions of the target used, in mm.
width = 594
height = 420
; width = 297
; height = 210

; (double) minimum distance between markers in a target
min_marker_distance = 0.5

; (double) maximum distance between markers in a target
max_marker_distance = 4.0

; (double) amount that the marker size can vary in a
; target.
; (actual tolerance = 1.0 - this)
; decreasing this means potentially markers
; with a more skewed perspective will be
; detected.
marker_size_tolerance = 0.5

; (double) amount of seconds a target can go undetected before
; it's removed from the list.
lifetime = 0.75

; (double) smoothness factor applied when updating
; existing targets with newly detected ones.
alpha = 0.25

; (int) minimum age of a target (in frames) before we start to consider it
; as valid
min_age = 1
